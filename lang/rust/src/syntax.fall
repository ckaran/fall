tokenizer {
  #[skip] whitespace r"\s+"

  as 'as'
  crate 'crate'
  extern 'extern'
  fn 'fn'
  let 'let'
  pub 'pub'
  struct 'struct'
  use 'use'
  mod 'mod'

  lparen '('
  rparen ')'
  lbrace '{'
  rbrace '}'
  langle '<'
  rangle '>'
  eq '='
  semi ';'
  colon ':'
  coloncolon '::'
  comma ','
  star '*'

  ident r"\p{XID_Start}\w*"
  number r"\d+"
}

pub rule file { mod_contents }

rule mod_contents {
  <rep <with_skip mod_form_first mod_form>>
}


rule mod_form_first { 
  'pub' | 'fn' | 'struct' | 'use' | 'extern' | 'mod'
}

rule mod_form { 
  use_decl | extern_crate_decl | fn_def | struct_def | mod_def
}

pub rule use_decl {
  'use' <commit> { 
    mod_path {alias | <opt {'::' use_spec}>}
  | <opt '::'> use_spec 
  } ';'
}

pub rule use_spec {
  '*'
| '{' <layer in_braces <rep use_spec_entry>> '}'
}

pub rule use_spec_entry {
  ident <commit> <opt alias> {<eof> | ','}
}

pub rule extern_crate_decl {
  'extern' 'crate' <commit> ident <opt alias> ';'
}

pub rule fn_def {
  <opt visibility> 'fn' <commit> ident
  '(' <layer in_parens value_params> ')'
  block_expr
}

rule value_params {
  <rep value_param>
}

pub rule value_param {
  pattern ':' type {<eof> | ','}
}


pub rule struct_def {
  <opt visibility> 'struct' <commit> ident {
    '{' <layer in_braces <rep struct_field>> '}'
  | ';'
  | '(' <layer in_parens <rep tuple_field>> ')' ';'
  }
}

pub rule mod_def {
  <opt visibility> 'mod' <commit> ident {
    ';'
  | '{' <layer in_braces mod_contents> '}'
  }
}

pub rule struct_field {
  <opt visibility> ident <commit> ':' type { <eof> | ',' }
}

pub rule tuple_field {
  <opt visibility> type <commit> { <eof> | ',' }
}

pub rule visibility {
  'pub'
}

rule mod_path { path }
rule type_path { <enter 'type_path' path> }

#[pratt]
pub rule path {
  unqualified_path | qualified_path
}

#[atom, type(path)]
pub rule unqualified_path {
  <opt '::'> path_segment
}

#[postfix, type(path)]
pub rule qualified_path {
  path {'::' path_segment}
}

rule path_segment {
  ident <opt {<is_in 'type_path' > '<' '>'}>
}


pub rule alias { 'as' ident }

pub rule type {
  type_path
}

pub rule stmt {
  'let' <commit> pattern '=' expr ';'
}

pub rule pattern { ident }
pub rule expr { number }

pub rule block_expr {
  '{' <layer in_braces <rep stmt>> '}'
}

rule in_braces { <rep brace_balanced> }
rule brace_balanced {
  '{' <commit> in_braces '}'
| <not '}'>
}

rule in_parens { <rep paren_balanced> }
rule paren_balanced {
  '(' <commit> in_parens ')'
| <not ')'>
}
