tokenizer {
  as 'as'
  crate 'crate'
  extern 'extern'
  fn 'fn'
  let 'let'
  pub 'pub'
  struct 'struct'
  use 'use'

  lparen '('
  rparen ')'
  lbrace '{'
  rbrace '}'
  eq '='
  semi ';'
  colon ':'
  coloncolon '::'
  comma ','
  star '*'

  whitespace r"\s+"
  ident r"\p{XID_Start}\w*"
  number r"\d+"
}

pub rule file {
  <rep <with_skip file_form_first file_form>>
}

rule file_form_first { 
  'pub' | 'fn' | 'struct' | 'use' | 'extern'
}

rule file_form { 
  use_decl | extern_crate_decl | fn_def | struct_def
}

pub rule use_decl {
  'use' <commit> { 
    path {<opt '::' use_spec> | alias}';'
  | '::' use_spec ';'
  | <not_ahead '*'> use_spec ';'
  }
}

example r#"
  use ::foo::bar::baz;
"#

pub rule use_spec {
  '*'
| '{' <layer in_braces <rep use_spec_entry>> '}'
}

pub rule use_spec_entry {
  ident {<eof> | ','}
}

pub rule extern_crate_decl {
  'extern' 'crate' <commit> ident ';'
}

pub rule fn_def {
  <opt visibility> 'fn' <commit> ident
  '(' ')' block_expr
}


pub rule struct_def {
  <opt visibility> 'struct' <commit> ident {
    '{' <layer in_braces <rep struct_field>> '}'
  | ';'
  | '(' <layer in_parens <rep tuple_field>> ')' ';'
  }
}

pub rule struct_field {
  <opt visibility> ident <commit> ':' type { <eof> | ',' }
}

pub rule tuple_field {
  <opt visibility> type <commit> { <eof> | ',' }
}

pub rule visibility {
  'pub'
}


#[pratt]
pub rule path {
  unqualified_path | qualified_path
}

#[atom, type(path)]
pub rule unqualified_path {
  <opt '::'> ident
}

#[postfix, type(path)]
pub rule qualified_path {
  path {'::' ident}
}

pub rule alias { 'as' ident }

pub rule type {
  ident
}

pub rule stmt {
  'let' <commit> pattern '=' expr ';'
}

pub rule pattern { ident }
pub rule expr { number }

pub rule block_expr {
  '{' <layer in_braces <rep stmt>> '}'
}

rule in_braces { <rep brace_balanced> }
rule brace_balanced {
  '{' <commit> in_braces '}'
| <not '}'>
}

rule in_parens { <rep paren_balanced> }
rule paren_balanced {
  '(' <commit> in_parens ')'
| <not ')'>
}
