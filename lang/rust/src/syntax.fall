tokenizer {
  pub 'pub'
  let 'let'
  struct 'struct'
  fn 'fn'
  use 'use'

  lparen '('
  rparen ')'
  lbrace '{'
  rbrace '}'
  eq '='
  semi ';'
  colon ':'
  coloncolon '::'
  comma ','

  whitespace r"\s+"
  ident r"\p{XID_Start}\w*"
  number r"\d+"
}

pub rule file {
  <rep <with_skip file_form_first file_form>>
}

rule file_form_first { 
  'pub' | 'fn' | 'struct' | 'use'
}

rule file_form { 
  fn_def | struct_def | use_decl
}

pub rule use_decl {
  'use' <commit> path ';'
}

pub rule fn_def {
  <opt {'pub'}> 'fn' <commit> ident
  '(' ')' block_expr
}


pub rule struct_def {
  <opt 'pub'> 'struct' <commit> ident
  '{' <layer block_body <rep struct_field>>'}'
}

pub rule struct_field {
  <opt 'pub'> ident <commit> ':' type { <eof> | ',' }
}

example r"
  use foo;
  use foo::bar;
  use ::foo::bar::baz;
"

#[pratt]
rule path {
  unqualified_path | qualified_path
}

#[atom]
pub rule unqualified_path {
  <opt '::'> ident
}

#[postfix]
pub rule qualified_path {
  path {'::' ident}
}


pub rule type {
  ident
}


pub rule block_expr {
  '{' <layer block_body <rep stmt>> '}'
}

rule block_body { <rep balanced> }
rule balanced {
  '{' <commit> block_body '}'
| <not '}'>
}


pub rule stmt {
  'let' <commit> pattern '=' expr ';'
}

pub rule pattern { ident }
pub rule expr { number }
