impl Node {}
impl<'f> ::Debug for Node<'f> { }

FILE
  IMPL_DEF
    IMPL "impl"
    TYPE_REFERENCE
      PATH
        IDENT "Node"
    L_CURLY "{"
    R_CURLY "}"
  IMPL_DEF
    IMPL "impl"
    TYPE_PARAMETERS
      L_ANGLE "<"
      LIFETIME_PARAMETER
        LIFETIME "\'f"
      R_ANGLE ">"
    TYPE_REFERENCE
      PATH
        COLONCOLON "::"
        IDENT "Debug"
    FOR "for"
    TYPE_REFERENCE
      PATH
        IDENT "Node"
        TYPE_ARGUMENTS
          L_ANGLE "<"
          LIFETIME "\'f"
          R_ANGLE ">"
    L_CURLY "{"
    R_CURLY "}"

----------------------------------------
pub const X: i32 = 0;

FILE
  CONST_DEF
    VISIBILITY
      PUB "pub"
    CONST "const"
    IDENT "X"
    COLON ":"
    TYPE_REFERENCE
      PATH
        IDENT "i32"
    EQ "="
    LITERAL
      NUMBER "0"
    SEMI ";"

----------------------------------------
struct B<'b, C>();

FILE
  STRUCT_DEF
    STRUCT "struct"
    IDENT "B"
    TYPE_PARAMETERS
      L_ANGLE "<"
      LIFETIME_PARAMETER
        LIFETIME "\'b"
      COMMA ","
      TYPE_PARAMETER
        IDENT "C"
      R_ANGLE ">"
    L_PAREN "("
    R_PAREN ")"
    SEMI ";"

----------------------------------------
const C: Foo<Bar> = foo::<'bar, Baz>;

FILE
  CONST_DEF
    CONST "const"
    IDENT "C"
    COLON ":"
    TYPE_REFERENCE
      PATH
        IDENT "Foo"
        TYPE_ARGUMENTS
          L_ANGLE "<"
          TYPE_REFERENCE
            PATH
              IDENT "Bar"
          R_ANGLE ">"
    EQ "="
    PATH_EXPR
      PATH
        IDENT "foo"
        TYPE_ARGUMENTS
          COLONCOLON "::"
          L_ANGLE "<"
          LIFETIME "\'bar"
          COMMA ","
          TYPE_REFERENCE
            PATH
              IDENT "Baz"
          R_ANGLE ">"
    SEMI ";"

----------------------------------------
type A = A;
type B = &'static B;

FILE
  TYPE_DEF
    TYPE "type"
    IDENT "A"
    EQ "="
    TYPE_REFERENCE
      PATH
        IDENT "A"
    SEMI ";"
  TYPE_DEF
    TYPE "type"
    IDENT "B"
    EQ "="
    TYPE_REFERENCE
      AMPERSAND "&"
      LIFETIME "\'static"
      TYPE_REFERENCE
        PATH
          IDENT "B"
    SEMI ";"

----------------------------------------
fn main() {
  ();
  (1);
  ((1));
  (1,);
}

FILE
  FN_DEF
    FN "fn"
    IDENT "main"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      EXPR_STMT
        UNIT_EXPR
          L_PAREN "("
          R_PAREN ")"
        SEMI ";"
      EXPR_STMT
        PAREN_EXPR
          L_PAREN "("
          LITERAL
            NUMBER "1"
          R_PAREN ")"
        SEMI ";"
      EXPR_STMT
        PAREN_EXPR
          L_PAREN "("
          PAREN_EXPR
            L_PAREN "("
            LITERAL
              NUMBER "1"
            R_PAREN ")"
          R_PAREN ")"
        SEMI ";"
      EXPR_STMT
        TUPLE_EXPR
          L_PAREN "("
          LITERAL
            NUMBER "1"
          COMMA ","
          R_PAREN ")"
        SEMI ";"
      R_CURLY "}"

----------------------------------------
fn foo() { 
    |x, y: i32,| 1 + 1;
    move || -> i32 { 92 };
}

FILE
  FN_DEF
    FN "fn"
    IDENT "foo"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      EXPR_STMT
        LAMBDA_EXPR
          PIPE "|"
          LAMBDA_VALUE_PARAM
            PATTERN
              PATH
                IDENT "x"
          COMMA ","
          LAMBDA_VALUE_PARAM
            PATTERN
              PATH
                IDENT "y"
            COLON ":"
            TYPE_REFERENCE
              PATH
                IDENT "i32"
          COMMA ","
          PIPE "|"
          SUM_EXPR
            LITERAL
              NUMBER "1"
            PLUS "+"
            LITERAL
              NUMBER "1"
        SEMI ";"
      EXPR_STMT
        LAMBDA_EXPR
          MOVE "move"
          PIPE "|"
          PIPE "|"
          THIN_ARROW "->"
          TYPE_REFERENCE
            PATH
              IDENT "i32"
          BLOCK_EXPR
            L_CURLY "{"
            LITERAL
              NUMBER "92"
            R_CURLY "}"
        SEMI ";"
      R_CURLY "}"

----------------------------------------
fn main() { if true { foo } else { bar } }

FILE
  FN_DEF
    FN "fn"
    IDENT "main"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      IF_EXPR
        IF "if"
        PATH_EXPR
          PATH
            IDENT "true"
        BLOCK_EXPR
          L_CURLY "{"
          PATH_EXPR
            PATH
              IDENT "foo"
          R_CURLY "}"
        ELSE "else"
        BLOCK_EXPR
          L_CURLY "{"
          PATH_EXPR
            PATH
              IDENT "bar"
          R_CURLY "}"
      R_CURLY "}"

----------------------------------------
fn main() { 'w: while true {} }

FILE
  FN_DEF
    FN "fn"
    IDENT "main"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      WHILE_EXPR
        LIFETIME "\'w"
        COLON ":"
        WHILE "while"
        PATH_EXPR
          PATH
            IDENT "true"
        BLOCK_EXPR
          L_CURLY "{"
          R_CURLY "}"
      R_CURLY "}"

----------------------------------------
fn main() {
    if S {};
    if (S {}) {}
    if let Some(x) = foo() {}
}

FILE
  FN_DEF
    FN "fn"
    IDENT "main"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      EXPR_STMT
        IF_EXPR
          IF "if"
          PATH_EXPR
            PATH
              IDENT "S"
          BLOCK_EXPR
            L_CURLY "{"
            R_CURLY "}"
      EMPTY_STMT
        SEMI ";"
      EXPR_STMT
        IF_EXPR
          IF "if"
          PAREN_EXPR
            L_PAREN "("
            STRUCT_LITERAL
              PATH
                IDENT "S"
              L_CURLY "{"
              R_CURLY "}"
            R_PAREN ")"
          BLOCK_EXPR
            L_CURLY "{"
            R_CURLY "}"
      IF_EXPR
        IF "if"
        LET "let"
        PATTERN
          PATH
            IDENT "Some"
          L_PAREN "("
          PATTERN
            PATH
              IDENT "x"
          R_PAREN ")"
        EQ "="
        CALL_EXPR
          PATH_EXPR
            PATH
              IDENT "foo"
          L_PAREN "("
          R_PAREN ")"
        BLOCK_EXPR
          L_CURLY "{"
          R_CURLY "}"
      R_CURLY "}"

----------------------------------------
fn main() { 'pool: loop { 92 }}

FILE
  FN_DEF
    FN "fn"
    IDENT "main"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      LOOP_EXPR
        LIFETIME "\'pool"
        COLON ":"
        LOOP "loop"
        BLOCK_EXPR
          L_CURLY "{"
          LITERAL
            NUMBER "92"
          R_CURLY "}"
      R_CURLY "}"

----------------------------------------
fn main() { x.foo; x.92; }

FILE
  FN_DEF
    FN "fn"
    IDENT "main"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      EXPR_STMT
        FIELD_EXPR
          PATH_EXPR
            PATH
              IDENT "x"
          DOT "."
          IDENT "foo"
        SEMI ";"
      EXPR_STMT
        FIELD_EXPR
          PATH_EXPR
            PATH
              IDENT "x"
          DOT "."
          NUMBER "92"
        SEMI ";"
      R_CURLY "}"

----------------------------------------
#[foo, bar(baz), quux = 92] struct Foo;
#[cfg(target_os="linux")] mod bar;

FILE
  STRUCT_DEF
    ATTRIBUTE
      HASH "#"
      L_BRACK "["
      ATTR_VALUE
        IDENT "foo"
      COMMA ","
      ATTR_VALUE
        IDENT "bar"
        L_PAREN "("
        ATTR_VALUE
          IDENT "baz"
        R_PAREN ")"
      COMMA ","
      ATTR_VALUE
        IDENT "quux"
        EQ "="
        LITERAL
          NUMBER "92"
      R_BRACK "]"
    STRUCT "struct"
    IDENT "Foo"
    SEMI ";"
  MOD_DEF
    ATTRIBUTE
      HASH "#"
      L_BRACK "["
      ATTR_VALUE
        IDENT "cfg"
        L_PAREN "("
        ATTR_VALUE
          IDENT "target_os"
          EQ "="
          LITERAL
            STRING "\"linux\""
        R_PAREN ")"
      R_BRACK "]"
    MOD "mod"
    IDENT "bar"
    SEMI ";"

----------------------------------------
