FILE
  FN_DEF
    FN "fn"
    IDENT "a"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      R_CURLY "}"
  FN_DEF
    FN "fn"
    IDENT "b"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      LITERAL
        NUMBER "1"
      R_CURLY "}"
  FN_DEF
    FN "fn"
    IDENT "c"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      EXPR_STMT
        LITERAL
          NUMBER "1"
        SEMI ";"
      R_CURLY "}"
  FN_DEF
    FN "fn"
    IDENT "d"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      BLOCK_EXPR
        L_CURLY "{"
        R_CURLY "}"
      R_CURLY "}"
  FN_DEF
    FN "fn"
    IDENT "precedence"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      LET_STMT
        LET "let"
        PATTERN
          PATH
            IDENT "x"
        EQ "="
        SUM_EXPR
          SUM_EXPR
            LITERAL
              NUMBER "1"
            PLUS "+"
            PRODUCT_EXPR
              PRODUCT_EXPR
                LITERAL
                  NUMBER "2"
                STAR "*"
                LITERAL
                  NUMBER "3"
              PERCENT "%"
              LITERAL
                NUMBER "4"
          MINUS "-"
          PRODUCT_EXPR
            LITERAL
              NUMBER "5"
            SLASH "/"
            LITERAL
              NUMBER "6"
        SEMI ";"
      EXPR_STMT
        SUM_EXPR
          LITERAL
            NUMBER "1"
          PLUS "+"
          PRODUCT_EXPR
            LITERAL
              NUMBER "2"
            STAR "*"
            LITERAL
              NUMBER "3"
        SEMI ";"
      EXPR_STMT
        BIT_SHIFT
          LITERAL
            NUMBER "1"
          SHL "<<"
          SUM_EXPR
            LITERAL
              NUMBER "2"
            PLUS "+"
            LITERAL
              NUMBER "3"
        SEMI ";"
      EXPR_STMT
        BIT_AND
          LITERAL
            NUMBER "1"
          AMPERSAND "&"
          BIT_SHIFT
            LITERAL
              NUMBER "2"
            SHR ">>"
            LITERAL
              NUMBER "3"
        SEMI ";"
      EXPR_STMT
        BIT_OR
          LITERAL
            NUMBER "1"
          PIPE "|"
          BIT_AND
            LITERAL
              NUMBER "2"
            AMPERSAND "&"
            LITERAL
              NUMBER "3"
        SEMI ";"
      EXPR_STMT
        SUM_EXPR
          NEGATION_EXPR
            MINUS "-"
            NEGATION_EXPR
              MINUS "-"
              NEGATION_EXPR
                MINUS "-"
                REFERENCE_EXPR
                  AMPERSAND "&"
                  DEREFERENCE_EXPR
                    STAR "*"
                    LITERAL
                      NUMBER "1"
          MINUS "-"
          PRODUCT_EXPR
            NEGATION_EXPR
              MINUS "-"
              NEGATION_EXPR
                MINUS "-"
                LITERAL
                  NUMBER "2"
            STAR "*"
            LITERAL
              NUMBER "9"
        SEMI ";"
      R_CURLY "}"
  FN_DEF
    FN "fn"
    IDENT "angle_ambiguity"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      EXPR_STMT
        BIT_SHIFT
          BIT_SHIFT
            PATH_EXPR
              PATH
                IDENT "foo"
                TYPE_ARGUMENTS
                  COLONCOLON "::"
                  L_ANGLE "<"
                  PATH_TYPE
                    PATH
                      IDENT "X"
                      TYPE_ARGUMENTS
                        L_ANGLE "<"
                        PATH_TYPE
                          PATH
                            IDENT "Y"
                        R_ANGLE ">"
                  R_ANGLE ">"
            SHR ">>"
            LITERAL
              NUMBER "1"
          SHL "<<"
          LITERAL
            NUMBER "2"
        SEMI ";"
      R_CURLY "}"
  FN_DEF
    FN "fn"
    IDENT "blockish"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      EXPR_STMT
        BLOCK_EXPR
          L_CURLY "{"
          R_CURLY "}"
      EMPTY_STMT
        SEMI ";"
      EXPR_STMT
        IF_EXPR
          IF "if"
          LITERAL
            NUMBER "1"
          BLOCK_EXPR
            L_CURLY "{"
            R_CURLY "}"
          ELSE "else"
          BLOCK_EXPR
            L_CURLY "{"
            IF_EXPR
              IF "if"
              LITERAL
                NUMBER "2"
              BLOCK_EXPR
                L_CURLY "{"
                R_CURLY "}"
            R_CURLY "}"
      EMPTY_STMT
        SEMI ";"
      EXPR_STMT
        SUM_EXPR
          SUM_EXPR
            LITERAL
              NUMBER "1"
            PLUS "+"
            IF_EXPR
              IF "if"
              LITERAL
                NUMBER "2"
              BLOCK_EXPR
                L_CURLY "{"
                LITERAL
                  NUMBER "3"
                R_CURLY "}"
              ELSE "else"
              BLOCK_EXPR
                L_CURLY "{"
                LITERAL
                  NUMBER "4"
                R_CURLY "}"
          PLUS "+"
          LITERAL
            NUMBER "5"
        SEMI ";"
      R_CURLY "}"
  FN_DEF
    FN "fn"
    IDENT "struct_cond_ambiguity"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      EXPR_STMT
        IF_EXPR
          IF "if"
          PATH_EXPR
            PATH
              IDENT "foo"
          BLOCK_EXPR
            L_CURLY "{"
            R_CURLY "}"
      EXPR_STMT
        IF_EXPR
          IF "if"
          PAREN_EXPR
            L_PAREN "("
            STRUCT_LITERAL
              PATH
                IDENT "Foo"
              L_CURLY "{"
              R_CURLY "}"
            R_PAREN ")"
          BLOCK_EXPR
            L_CURLY "{"
            R_CURLY "}"
      EXPR_STMT
        IF_EXPR
          IF "if"
          CALL_EXPR
            PATH_EXPR
              PATH
                IDENT "foo"
            L_PAREN "("
            VALUE_ARGUMENT
              STRUCT_LITERAL
                PATH
                  IDENT "Foo"
                L_CURLY "{"
                R_CURLY "}"
            R_PAREN ")"
          BLOCK_EXPR
            L_CURLY "{"
            R_CURLY "}"
      IF_EXPR
        IF "if"
        BLOCK_EXPR
          L_CURLY "{"
          STRUCT_LITERAL
            PATH
              IDENT "Foo"
            L_CURLY "{"
            R_CURLY "}"
          R_CURLY "}"
        BLOCK_EXPR
          L_CURLY "{"
          R_CURLY "}"
      R_CURLY "}"
  FN_DEF
    FN "fn"
    IDENT "blocklike_expressions"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      EXPR_STMT
        BLOCK_EXPR
          L_CURLY "{"
          EXPR_STMT
            LITERAL
              NUMBER "92"
            SEMI ";"
          R_CURLY "}"
      EXPR_STMT
        NEGATION_EXPR
          MINUS "-"
          LITERAL
            NUMBER "1"
        SEMI ";"
      EXPR_STMT
        IF_EXPR
          IF "if"
          PATH_EXPR
            PATH
              IDENT "foo"
          BLOCK_EXPR
            L_CURLY "{"
            R_CURLY "}"
      EXPR_STMT
        IF_EXPR
          IF "if"
          PATH_EXPR
            PATH
              IDENT "bar"
          BLOCK_EXPR
            L_CURLY "{"
            R_CURLY "}"
      EXPR_STMT
        SUM_EXPR
          SUM_EXPR
            LITERAL
              NUMBER "1"
            PLUS "+"
            BLOCK_EXPR
              L_CURLY "{"
              LITERAL
                NUMBER "1"
              R_CURLY "}"
          PLUS "+"
          LITERAL
            NUMBER "2"
        SEMI ";"
      LET_STMT
        LET "let"
        PATTERN
          UNDERSCORE "_"
        EQ "="
        SUM_EXPR
          BLOCK_EXPR
            L_CURLY "{"
            LITERAL
              NUMBER "1"
            R_CURLY "}"
          PLUS "+"
          LITERAL
            NUMBER "1"
        SEMI ";"
      EXPR_STMT
        PAREN_EXPR
          L_PAREN "("
          SUM_EXPR
            BLOCK_EXPR
              L_CURLY "{"
              LITERAL
                NUMBER "1"
              R_CURLY "}"
            PLUS "+"
            LITERAL
              NUMBER "1"
          R_PAREN ")"
        SEMI ";"
      EXPR_STMT
        BLOCK_EXPR
          L_CURLY "{"
          LET_STMT
            LET "let"
            PATTERN
              PATH
                IDENT "x"
            EQ "="
            SUM_EXPR
              BLOCK_EXPR
                L_CURLY "{"
                LITERAL
                  NUMBER "1"
                R_CURLY "}"
              PLUS "+"
              LITERAL
                NUMBER "1"
            SEMI ";"
          R_CURLY "}"
      BLOCK_EXPR
        L_CURLY "{"
        LITERAL
          NUMBER "92"
        R_CURLY "}"
      R_CURLY "}"
  FN_DEF
    FN "fn"
    IDENT "misc"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      LET_STMT
        LET "let"
        PATTERN
          PATH
            IDENT "a"
        EQ "="
        LITERAL
          NUMBER "1"
        SEMI ";"
      LET_STMT
        LET "let"
        PATTERN
          PATH
            IDENT "b"
        EQ "="
        PATH_EXPR
          PATH
            PATH
              IDENT "a"
            COLONCOLON "::"
            IDENT "b"
            TYPE_ARGUMENTS
              COLONCOLON "::"
              L_ANGLE "<"
              PATH_TYPE
                PATH
                  IDENT "c"
              R_ANGLE ">"
        SEMI ";"
      EXPR_STMT
        LITERAL
          NUMBER "3"
        SEMI ";"
      EXPR_STMT
        PAREN_EXPR
          L_PAREN "("
          LITERAL
            NUMBER "4"
          R_PAREN ")"
        SEMI ";"
      EXPR_STMT
        STRUCT_LITERAL
          PATH
            IDENT "foo"
          L_CURLY "{"
          R_CURLY "}"
        SEMI ";"
      EXPR_STMT
        STRUCT_LITERAL
          PATH
            IDENT "foo"
          L_CURLY "{"
          STRUCT_LITERAL_FIELD
            IDENT "a"
            COLON ":"
            LITERAL
              NUMBER "1"
          R_CURLY "}"
        SEMI ";"
      EXPR_STMT
        STRUCT_LITERAL
          PATH
            IDENT "foo"
          L_CURLY "{"
          STRUCT_LITERAL_FIELD
            IDENT "a"
            COLON ":"
            LITERAL
              NUMBER "2"
          COMMA ","
          R_CURLY "}"
        SEMI ";"
      EXPR_STMT
        STRUCT_LITERAL
          PATH
            PATH
              IDENT "foo"
            COLONCOLON "::"
            IDENT "bar"
          L_CURLY "{"
          STRUCT_LITERAL_FIELD
            IDENT "a"
            COLON ":"
            LITERAL
              NUMBER "1"
          COMMA ","
          STRUCT_LITERAL_FIELD
            IDENT "b"
            COLON ":"
            STRUCT_LITERAL
              PATH
                IDENT "C"
              L_CURLY "{"
              R_CURLY "}"
          R_CURLY "}"
        SEMI ";"
      EXPR_STMT
        CALL_EXPR
          PATH_EXPR
            PATH
              IDENT "foo"
          L_PAREN "("
          VALUE_ARGUMENT
            LITERAL
              NUMBER "1"
          COMMA ","
          VALUE_ARGUMENT
            LITERAL
              NUMBER "2"
          COMMA ","
          VALUE_ARGUMENT
            CALL_EXPR
              PATH_EXPR
                PATH
                  IDENT "bar"
              L_PAREN "("
              VALUE_ARGUMENT
                LITERAL
                  NUMBER "3"
              COMMA ","
              R_PAREN ")"
          R_PAREN ")"
        SEMI ";"
      EXPR_STMT
        FIELD_EXPR
          FIELD_EXPR
            PATH_EXPR
              PATH
                IDENT "foo"
            DOT "."
            IDENT "bar"
          DOT "."
          IDENT "baz"
        SEMI ";"
      R_CURLY "}"
